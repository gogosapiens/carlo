from carlo import printc
from carlo import gpt

# def validate_resp(response):
#     # print("validating response", response)
#     response['title'] = "value1"
#     return True
    
# def optimizer_resp(response):
#     # print("optimizing response", response)
#     # if isinstance(response, str):
#     #     return "value222"
#     # else:
#     return 1

import time
times = []
desired_answers = [
    {
        "note":"Tone: Calm",
        "answer_id":"0",
        "words_count_max":15,
        "words_count_min":5
    },
    {
        "words_count_min":5,
        "words_count_max":15,
        "note":"Tone: Calm",
        "answer_id":"1"
    },
    {
        "note":"Tone: Calm",
        "answer_id":"2",
        "words_count_min":5,
        "words_count_max":15
    }
]
comments = [
    {
        "author":"@b_a_s_999",
        "text":"–î–æ—Å–º–æ—Ç—Ä–µ–ª ‚ò∫Ô∏è –∫–∞–π—Ñ–∞–Ω—É–ª, –∑–∞—Ä—è–¥–∏–ª—Å—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏, –æ–±–æ–º–ª–µ–ª –æ—Ç —à–∏–∫–∞—Ä–Ω–æ–≥–æ –∑–∞–∫–∞—Ç–∞ –Ω–∞–¥ –°—Ç–æ—É–Ω—Ö–µ–Ω–¥–∂, –∏ –≤–æ—Å—Ö–∏—Ç–∏–ª—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –û–∫—Å—Ñ–æ—Ä–¥–∞ü§© —Å–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º, –∂–¥—É –≤—ã–ø—É—Å–∫ –∏–∑ –õ–æ–Ω–¥–æ–Ω–∞. –í—Å–µ–º –º–∏—Ä ‚úåüèΩÔ∏è",
        "comment_id":"UgzcswCq-mjiQjUNMNJ4AaABAg"
    },
    {
        "author":"@Elena-qt8cc",
        "comment_id":"UgzVA3rHLLNtIFtIT9R4AaABAg",
        "text":"–†–µ–±—è—Ç–∞, –æ–≥—Ä–æ–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å. üôè\n–í–∞—à–∏ —Ñ–∏–ª—å–º—ã - –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è."
    },
    {
        "comment_id":"UgxYSaKGJ4qqDOjvqkR4AaABAg",
        "author":"@about.a.girl.toryvi",
        "text":"–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä–∞—Å–∏–≤–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–µ–π —Å–µ–º—å–µ–π‚ù§Ô∏è"
    },
    {
        "author":"@annabachmann5757",
        "text":"–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, —Ä–µ–±—è—Ç–∞, –º–æ–ª–æ–¥—Ü—ã, —á—Ç–æ –≤—ã–ª–æ–∂–∏–ª–∏ —ç—Ç–æ—Ç –≤—ã–ø—É—Å–∫ –∫–∞–∫ —Ä–∞–∑ –Ω–∞ –ø–µ—Ä–≤—ã–π –ê–¥–≤–µ–Ω—Ç üå≤‚ùÑÔ∏èüå≤ \n–ú–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ- —Ä–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫, –∫–æ–≥–¥–∞ –µ–≥–æ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ—à—å –∏ –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ–Ω –æ–±–∞–ª–¥–µ–Ω–Ω—ã–π ‚ù§Ô∏è\n–û—á–µ–Ω—å –≤–∞—Å –ª—é–±–∏–º –≤—Å–µ–π —Å–µ–º—å–µ–π‚ô•Ô∏è",
        "comment_id":"UgxvJoy97JmgpRYQAL54AaABAg"
    },
    {
        "comment_id":"Ugyca7c6LDlBWUbQSYh4AaABAg",
        "text":"—Ä–µ–¥–∫–æ –ø–∏—à—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–æ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª‚Ä¶ —ç—Ç–æ –Ω–µ—á—Ç–æ, —Ä–µ–±—è—Ç–∞, –≤—ã –∞—Ñ–∏–≥–µ–Ω–Ω—ã–µ! –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –∂–¥—É –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –∫–∞–∫ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –µ–π –ë–æ–≥—É)",
        "author":"@user-nj1cv1vl1h"
    }
]
answers_format = {
   'answers': [
        {
            'comment_id': 'cid_1',
            'variants': [
                {
                    'answer_id': '0',
                    'text': 'answer 1'
                },
                {
                    'answer_id': '1',
                    'text': 'answer 2'
                }
            ]
        },    
    ]
}
for _ in range(3):
    start_time = time.time()
    prompt = f"""
I have youtube channel. Suggest {len(desired_answers)} answers for each user comment (each answer in the language of comment) under my video. Use video summary and info for context and style:
Summary: ‚ÄòThe video is about anal sex‚Äô
Info: ‚ÄòYou are a woman bloger, use sarcastic style‚Äô
Use answers parameters as setup for corresponding answer for each comment. ‚Äòwords_count‚Äô - for answer length, ‚Äònote‚Äô - fore style and other info. Use ‚Äòanswer_id‚Äô to refer this settings in response.
Answers parameters: ‚Äò{desired_answers}‚Äô
Comments: ‚Äò{comments}‚Äô
Resulting 'answers' array must contain {len(desired_answers) * len(comments)} objects. Return answer in JSON. 
JSON format:
‚Äò{answers_format}‚Äô
"""
    # print(prompt)
    response = gpt.get_json(prompt, seed=1)
    if not response:
        print("response is empty")
        continue
    if not response.get("answers"):
        print("response.answers is empty")
        continue
    if len(response["answers"]) != len(comments):
        print(len(response["answers"]), "should be", len(comments))
        print("response.answers is not valid")
        continue
    print(len(response["answers"][0]["variants"]), len(desired_answers))
    print(response)
    elapsed_time = time.time() - start_time
    times.append(elapsed_time)
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {elapsed_time} —Å–µ–∫—É–Ω–¥")

# median_time = sorted(times)[len(times)//2]
# min_time = min(times)
# max_time = max(times)
# print(f"–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {median_time} —Å–µ–∫—É–Ω–¥")
# print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {min_time} —Å–µ–∫—É–Ω–¥")
# print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {max_time} —Å–µ–∫—É–Ω–¥")

